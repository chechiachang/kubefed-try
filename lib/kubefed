#!/bin/bash
#
# lib/kubefed

kubefed::install_kubefed(){

  wget https://storage.googleapis.com/aurora-installer-release/federation-client-linux-amd64.tar.gz
  tar zxf federation-client-linux-amd64.tar.gz
  sudo cp federation/client/bin/kubefed /usr/local/bin && \
    chmod +x /usr/local/bin/kubefed

}
  
kubefed::install_kubectl(){

  curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  
  sudo chmod +x ./kubectl && \
    mv ./kubectl /usr/local/bin/kubectl

}

kubefed::init(){

  # MISSED in doc
  # ONCE
  gcloud config set container/use_client_certificate True
  export CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE=True

  for c in ${CLUSTERS[@]}; do
    gcloud container clusters get-credentials $c
    CLUSTER_CONTEXT=$(kubectl config get-contexts | grep '*' | awk '{print $2}')

    # Set context
    # MISSED in doc
    kubectl config set-context $c \
      --cluster=${CLUSTER_CONTEXT} \
      --user=${CLUSTER_CONTEXT}
  done

  kubefed init ${FED_NAME} \
    --context=${CLUSTERS[0]} \
    --host-cluster-context=${CLUSTERS[0]} \
    --dns-provider="google-clouddns" \
    --dns-zone-name="${GCLOUD_DNS_ZONE_NAME}."
  # There is / MUST BE a dot tailing dns zone name.

  kubectl create namespace default --context=${FED_NAME}

}

kubefed::join(){

  for c in ${CLUSTERS[@]}; do

    kubefed join $c \
      --context ${FED_NAME} \
      --cluster-context=$c \
      --host-cluster-context=${CLUSTERS[0]}

  done

  echo "kubectl --context=${FED_NAME} get clsuters"
  kubectl --context=${FED_NAME} get clusters

}

kubefed::uninstall(){
  for c in ${CLUSTERS[@]}; do
    kubectl delete namespace federation-system --context=$c
  done
}
